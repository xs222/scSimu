library(gridExtra)
library(tidyverse)
library(magrittr)
library(rtracklayer)
library(biomaRt)
library(ggvenn)
library(ggplot2)
library(igraph)
library(venn)
library(data.table)
library(ggpubr)
library(tidyverse)
library(matrixcalc)

set.seed(11272023)
setwd("/gpfs/gibbs/pi/zhao/xs282/validation/")
source("/gpfs/gibbs/pi/zhao/xs282/validation/cscore_real_data_function.R")

# prepare biological network----------------------------------------------------
# STRING
hs_filter <- readRDS("STRING/hs_filter_10_4_2023.rds")
hs_filter <- hs_filter %>%
  mutate(grp = paste(pmax(protein1, protein2), pmin(protein1, protein2), sep = "_"))

# Reactome
# hs_filter <- readRDS("Reactome/Processed_Reactome_10_07_2023.rds")
# hs_filter <- hs_filter %>%
#   mutate(grp = paste(pmax(V1, V2), pmin(V1, V2), sep = "_"))



# prepare coexpression network---------------------------------------------------
ROSMAP_oli_ct <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_sct_cor_NB_simu1000_abs_thresh.rds")

ROSMAP_ori_ests <- readRDS("mean_cor/semi_PD/simu/ROSMAP_NC_Oli_sct1000.rds")
ROSMAP_ori_ests[abs(ROSMAP_ori_ests)<0.015] <- 0
gene_name <- rownames(ROSMAP_ori_ests)
all(rownames(ROSMAP_ori_ests)==colnames(ROSMAP_ori_ests))

# cor estimations
ROSMAP_cscore <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_cscore1000_abs_thresh.rds")
ROSMAP_cscore_p <- MatrixBH(ROSMAP_cscore$p_value)
ROSMAP_cscore_p <- ROSMAP_cscore_p[gene_name, gene_name]
ROSMAP_cscore_est <- ROSMAP_cscore$est[gene_name, gene_name]
ROSMAP_cscore_est_filter <- ROSMAP_cscore_est
ROSMAP_cscore_est_filter[ROSMAP_cscore_p >= 0.05] <- 0
min(abs(ROSMAP_cscore_est_filter)[ROSMAP_cscore_est_filter!=0])


ROSMAP_p <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_simu_norm_p.rds")
ROSMAP_p_adj <- as.data.frame(apply(ROSMAP_p, 2, function(x){p.adjust(x, method = "BH")}))
upper2matrix <- function(est_mat, col_name){
  p_mat <- est_mat-est_mat
  p_mat[upper.tri(p_mat)] <- ROSMAP_p_adj[,col_name]
  p_mat <- p_mat + t(p_mat)
  return(p_mat)
}


ROSMAP_sct <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_sct1000_abs_thresh.rds")
ROSMAP_sct_est <- ROSMAP_sct[gene_name, gene_name]
ROSMAP_sct_p <- upper2matrix(ROSMAP_sct_est, "sct")
ROSMAP_sct_est_filter <- ROSMAP_sct_est
ROSMAP_sct_est_filter[ROSMAP_sct_p >= 0.05] <- 0


ROSMAP_ana_prn <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_ana_prn1000_abs_thresh.rds")
ROSMAP_ana_prn_est <- ROSMAP_ana_prn[gene_name, gene_name]
ROSMAP_ana_prn_p <- upper2matrix(ROSMAP_ana_prn_est, "ana_prn")
ROSMAP_ana_prn_est_filter <- ROSMAP_ana_prn_est
ROSMAP_ana_prn_est_filter[ROSMAP_ana_prn_p >= 0.05] <- 0


ROSMAP_noise <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_noise1000_abs_thresh.rds")
ROSMAP_noise_est <- ROSMAP_noise[gene_name, gene_name]
ROSMAP_noise_est <- apply(ROSMAP_noise_est, c(1,2), as.numeric)
ROSMAP_noise_p <- upper2matrix(ROSMAP_noise_est, "noise")
ROSMAP_noise_est_filter <- ROSMAP_noise_est
ROSMAP_noise_est_filter[ROSMAP_noise_p >= 0.05] <- 0


ROSMAP_propr <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_propr1000_abs_thresh.rds")
ROSMAP_propr_est <- ROSMAP_propr@matrix[gene_name, gene_name]
is.positive.definite((ROSMAP_propr_est+t(ROSMAP_propr_est))/2)
ROSMAP_propr_p <- upper2matrix(ROSMAP_propr_est, "propr")
ROSMAP_propr_est_filter <- ROSMAP_propr_est
ROSMAP_propr_est_filter[ROSMAP_propr_p >= 0.05] <- 0


ROSMAP_prn <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_prn1000_abs_thresh.rds")
ROSMAP_prn_est <- ROSMAP_prn[gene_name, gene_name]
ROSMAP_prn_p <- upper2matrix(ROSMAP_prn_est, "prn")
ROSMAP_prn_est_filter <- ROSMAP_prn_est
ROSMAP_prn_est_filter[ROSMAP_prn_p >= 0.05] <- 0

ROSMAP_spr <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_spr1000_abs_thresh.rds")
ROSMAP_spr_est <- ROSMAP_spr[gene_name, gene_name]
ROSMAP_spr_p <- upper2matrix(ROSMAP_spr_est, "spr")
ROSMAP_spr_est_filter <- ROSMAP_spr_est
ROSMAP_spr_est_filter[ROSMAP_spr_p >= 0.05] <- 0

ROSMAP_cscore_simu_p <- upper2matrix(ROSMAP_cscore_est, "cscore_est")
ROSMAP_cscore_est_filter_simu <- ROSMAP_cscore_est
ROSMAP_cscore_est_filter_simu[ROSMAP_cscore_simu_p >= 0.05] <- 0

#-----------------------------------------------------------

marginal_fit_ROSMAP = readRDS('marginal_fit/ROSMAP_NC_Oli_marginal_fit.rds')
mu_ROSMAP <- marginal_fit_ROSMAP[gene_name,]$mu

ncor_gene <- length(gene_name)
mu_col_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene,byrow = T)
mu_row_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene)

# filtered
tri = upper.tri(ROSMAP_ori_ests, diag = FALSE)
idxs = which(tri, arr.ind = T)
estimate_ROSMAP <- data.frame(id1=rownames(ROSMAP_ori_ests)[idxs[,1]],
                              id2=colnames(ROSMAP_ori_ests)[idxs[,2]],
                              ROSMAP_ori=ROSMAP_ori_ests[tri],
                              mu_col_ROSMAP=mu_col_ROSMAP[tri],
                              mu_row_ROSMAP=mu_row_ROSMAP[tri],
                              ROSMAP_ori_ests=ROSMAP_ori_ests[tri])
estimate_ROSMAP$log10mean_mu_ROSMAP <- log10(sqrt(10^estimate_ROSMAP$mu_col_ROSMAP*10^estimate_ROSMAP$mu_row_ROSMAP))
estimate_ROSMAP$true_cor <- ifelse(abs(estimate_ROSMAP$ROSMAP_ori_ests)!=0, 1, 0)


mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
G_list <- getBM(filters= "hgnc_symbol", attributes= c("ensembl_gene_id","hgnc_symbol"),values=rownames(ROSMAP_ori_ests),mart= mart)
G_list <- G_list %>% group_by(hgnc_symbol) %>%
  dplyr::slice(1) %>% ungroup()
unmapped <- rownames(ROSMAP_ori_ests)[!rownames(ROSMAP_ori_ests) %in% G_list$hgnc_symbol]
ensembl <- c(unmapped, G_list$ensembl_gene_id)
names(ensembl) <- c(unmapped, G_list$hgnc_symbol)
estimate_ROSMAP$id1 <- ensembl[estimate_ROSMAP$id1]
estimate_ROSMAP$id2 <- ensembl[estimate_ROSMAP$id2]
estimate_ROSMAP <- estimate_ROSMAP %>%
  mutate(grp = paste(pmax(id1, id2), pmin(id1, id2), sep = "_"))

estimate_ROSMAP_filter <- estimate_ROSMAP

estimate_ROSMAP$cscore_est <- ROSMAP_cscore_est[tri]
estimate_ROSMAP$sct <- ROSMAP_sct_est[tri]
estimate_ROSMAP$ana_prn <- ROSMAP_ana_prn_est[tri]
estimate_ROSMAP$noise <- ROSMAP_noise_est[tri]
estimate_ROSMAP$propr <- ROSMAP_propr_est[tri]
estimate_ROSMAP$prn <- ROSMAP_prn_est[tri]
estimate_ROSMAP$spr <- ROSMAP_spr_est[tri]
estimate_ROSMAP$cscore_p <- estimate_ROSMAP$cscore_est

# number of total overlap ------------------------------------------------------
# biological_net <- hs_filter
biological_net <- hs_filter[hs_filter$combined_score>500,]


## overlap with biological network with different p-value threshold --------------------
p_cutoff <- c(0.001, 0.005, 0.01, 0.05, 0.1)
overlap_string_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_string_p) <- p_cutoff
rownames(overlap_string_p) <- c(colnames(ROSMAP_p), "cscore_p")

# random_string <- list()
overlap_string_p_mean <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_string_p_mean) <- p_cutoff
rownames(overlap_string_p_mean) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_string_p_sd <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_string_p_sd) <- p_cutoff
rownames(overlap_string_p_sd) <- c(colnames(ROSMAP_p), "cscore_p")


estimate_p <- estimate_ROSMAP[,1:9]
estimate_p <- cbind(estimate_p, ROSMAP_p_adj)
estimate_p$cscore_p <- ROSMAP_cscore_p[upper.tri(ROSMAP_cscore_p)]
estimate_p$biological <- ifelse(estimate_p$grp %in% biological_net$grp, T, F)
sum(estimate_p$biological)
hist_data <- hist(estimate_p$log10mean_mu_ROSMAP, plot = FALSE, breaks = 20)
breaks <- hist_data$breaks
estimate_p$bins <- cut(estimate_p$log10mean_mu_ROSMAP, breaks = breaks)
table(estimate_p$bins)


for (i in 1:length(p_cutoff)){
  thresh <- p_cutoff[i]
  print(thresh)

  for (j in rownames(overlap_string_p)){
    ROSMAP_deci <- estimate_p[estimate_p[,j]<thresh,]
    overlap_string_p[j,i] <- sum(ROSMAP_deci$grp %in% biological_net$grp)
    
    hist_data2 <- hist(ROSMAP_deci$log10mean_mu_ROSMAP, breaks = breaks, plot = FALSE)
    ratio_counts <- hist_data2$counts / hist_data$counts
    ratio_counts[is.na(ratio_counts)] <- 0
    names(ratio_counts) <- names(table(estimate_p$bins))
    
    ROSMAP_deci_all <- estimate_p
    ROSMAP_deci_all$prob <- ratio_counts[ROSMAP_deci_all$bins]
    # random_string[[j]] <- replicate(100, sum(sample(ROSMAP_deci_all$biological, 
    #                                      prob = ROSMAP_deci_all$prob, 
    #                                      size = nrow(ROSMAP_deci), replace = F)))
    bio_prob <- sum(ROSMAP_deci_all$prob[ROSMAP_deci_all$biological])/sum(ROSMAP_deci_all$prob)
    overlap_string_p_mean[j,i] <- nrow(ROSMAP_deci)*bio_prob
    overlap_string_p_sd[j,i] <- nrow(ROSMAP_deci)*bio_prob*(1-bio_prob)
    
  }
}

overlap_string_p-overlap_string_p_mean
(overlap_string_p-overlap_string_p_mean)/overlap_string_p_sd




