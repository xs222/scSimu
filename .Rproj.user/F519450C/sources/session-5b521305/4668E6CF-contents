library(gridExtra)
library(tidyverse)
library(magrittr)
library(rtracklayer)
library(biomaRt)
library(ggvenn)
library(ggplot2)
library(igraph)
library(venn)
library(data.table)
library(ggpubr)
library(tidyverse)
library(matrixcalc)

set.seed(11272023)
setwd("/gpfs/gibbs/pi/zhao/xs282/validation/")
source("/gpfs/gibbs/pi/zhao/xs282/validation/cscore_real_data_function.R")

# prepare biological network----------------------------------------------------
# STRING
hs_filter <- readRDS("STRING/hs_filter_10_4_2023.rds")
hs_filter <- hs_filter %>%
  mutate(grp = paste(pmax(protein1, protein2), pmin(protein1, protein2), sep = "_"))

# Reactome
# hs_filter <- readRDS("Reactome/Processed_Reactome_10_07_2023.rds")
# hs_filter <- hs_filter %>%
#   mutate(grp = paste(pmax(V1, V2), pmin(V1, V2), sep = "_"))



# prepare coexpression network---------------------------------------------------
ROSMAP_oli_ct <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_sct_cor_NB_simu1000_abs_thresh.rds")

ROSMAP_ori_ests <- readRDS("mean_cor/semi_PD/simu/ROSMAP_NC_Oli_sct1000.rds")
ROSMAP_ori_ests[abs(ROSMAP_ori_ests)<0.015] <- 0
gene_name <- rownames(ROSMAP_ori_ests)
all(rownames(ROSMAP_ori_ests)==colnames(ROSMAP_ori_ests))

# cor estimations
ROSMAP_cscore <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_cscore1000_abs_thresh.rds")
ROSMAP_cscore_p <- MatrixBH(ROSMAP_cscore$p_value)
ROSMAP_cscore_p <- ROSMAP_cscore_p[gene_name, gene_name]
ROSMAP_cscore_est <- ROSMAP_cscore$est[gene_name, gene_name]
ROSMAP_cscore_est_filter <- ROSMAP_cscore_est
ROSMAP_cscore_est_filter[ROSMAP_cscore_p >= 0.05] <- 0
min(abs(ROSMAP_cscore_est_filter)[ROSMAP_cscore_est_filter!=0])


ROSMAP_p <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_simu_norm_p.rds")
ROSMAP_p_adj <- as.data.frame(apply(ROSMAP_p, 2, function(x){p.adjust(x, method = "BH")}))
upper2matrix <- function(est_mat, col_name){
  p_mat <- est_mat-est_mat
  p_mat[upper.tri(p_mat)] <- ROSMAP_p_adj[,col_name]
  p_mat <- p_mat + t(p_mat)
  return(p_mat)
}


ROSMAP_sct <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_sct1000_abs_thresh.rds")
ROSMAP_sct_est <- ROSMAP_sct[gene_name, gene_name]
ROSMAP_sct_p <- upper2matrix(ROSMAP_sct_est, "sct")
ROSMAP_sct_est_filter <- ROSMAP_sct_est
ROSMAP_sct_est_filter[ROSMAP_sct_p >= 0.05] <- 0


ROSMAP_ana_prn <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_ana_prn1000_abs_thresh.rds")
ROSMAP_ana_prn_est <- ROSMAP_ana_prn[gene_name, gene_name]
ROSMAP_ana_prn_p <- upper2matrix(ROSMAP_ana_prn_est, "ana_prn")
ROSMAP_ana_prn_est_filter <- ROSMAP_ana_prn_est
ROSMAP_ana_prn_est_filter[ROSMAP_ana_prn_p >= 0.05] <- 0


ROSMAP_noise <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_noise1000_abs_thresh.rds")
ROSMAP_noise_est <- ROSMAP_noise[gene_name, gene_name]
ROSMAP_noise_est <- apply(ROSMAP_noise_est, c(1,2), as.numeric)
ROSMAP_noise_p <- upper2matrix(ROSMAP_noise_est, "noise")
ROSMAP_noise_est_filter <- ROSMAP_noise_est
ROSMAP_noise_est_filter[ROSMAP_noise_p >= 0.05] <- 0


ROSMAP_propr <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_propr1000_abs_thresh.rds")
ROSMAP_propr_est <- ROSMAP_propr@matrix[gene_name, gene_name]
is.positive.definite((ROSMAP_propr_est+t(ROSMAP_propr_est))/2)
ROSMAP_propr_p <- upper2matrix(ROSMAP_propr_est, "propr")
ROSMAP_propr_est_filter <- ROSMAP_propr_est
ROSMAP_propr_est_filter[ROSMAP_propr_p >= 0.05] <- 0


ROSMAP_prn <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_prn1000_abs_thresh.rds")
ROSMAP_prn_est <- ROSMAP_prn[gene_name, gene_name]
ROSMAP_prn_p <- upper2matrix(ROSMAP_prn_est, "prn")
ROSMAP_prn_est_filter <- ROSMAP_prn_est
ROSMAP_prn_est_filter[ROSMAP_prn_p >= 0.05] <- 0

ROSMAP_spr <- readRDS("mean_cor/semi_PD_sparse/simu/ROSMAP_NC_Oli_simu_spr1000_abs_thresh.rds")
ROSMAP_spr_est <- ROSMAP_spr[gene_name, gene_name]
ROSMAP_spr_p <- upper2matrix(ROSMAP_spr_est, "spr")
ROSMAP_spr_est_filter <- ROSMAP_spr_est
ROSMAP_spr_est_filter[ROSMAP_spr_p >= 0.05] <- 0

ROSMAP_cscore_simu_p <- upper2matrix(ROSMAP_cscore_est, "cscore_est")
ROSMAP_cscore_est_filter_simu <- ROSMAP_cscore_est
ROSMAP_cscore_est_filter_simu[ROSMAP_cscore_simu_p >= 0.05] <- 0

# evaluate the qq plot of uncorrelated gene pairs ----------------------------
method <- c("sct", "ana_prn", "noise", "prn", "spr", "propr", "cscore_est")
names(method) <- c("\nsctransform", "\nAnalytic PR", "Noise \nRegularization", "\nPearson", "\nSpearman", "\npropr", "CS-CORE \n(Empirical)")
method <- sort(method)

ROSMAP_p2 <- ROSMAP_p
ROSMAP_p2$true <- ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)]
ROSMAP_p2 <- ROSMAP_p2[ROSMAP_p2$true==0,]
ROSMAP_p_adj2 <- as.data.frame(apply(ROSMAP_p2, 2, function(x){p.adjust(x, method = "BH")}))
colSums(ROSMAP_p_adj2<0.05)

set.seed(2232024)
idx <- sample(1:sum(ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)]==0), 10000)
qq_plot_ls <- list()
for (i in names(method)){
  plot_dat <- data.frame(empirical_p=ROSMAP_p[,method[i]],
                         true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
  plot_dat <- plot_dat[plot_dat$true==0, ][idx,]
  plot_dat$idx <- (1:length(idx))/(length(idx)+1)
  # idx <- sample(1:nrow(plot_dat),10000)
  qq_plot_ls[[i]] <- ggplot(plot_dat, aes(x=idx, y=sort(empirical_p)))+
    geom_point()+
    geom_abline(intercept=0, slope=1, color="red")+
    theme_bw()+labs(x="Unif(0,1)", y="Empirical P-value", title=i)+
    theme(plot.title = element_text(hjust=0.5))
}

plot_dat <- data.frame(empirical_p=ROSMAP_cscore$p_value[upper.tri(ROSMAP_cscore$p_value)],
                       true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
plot_dat <- plot_dat[plot_dat$true==0, ][idx,]
plot_dat$idx <- (1:length(idx))/(length(idx)+1)
# idx <- sample(1:nrow(plot_dat),10000)
qq_plot_ls[["CS-CORE"]] <- ggplot(plot_dat, aes(x=idx, y=sort(empirical_p)))+
  geom_point()+
  geom_abline(intercept=0, slope=1, color="red")+
  theme_bw()+labs(x="Theoretical Quantiles", y="Empirical P-value", title="CS-CORE")

ggarrange(plotlist = qq_plot_ls, ncol = 4, nrow=2)



# empirical p-value vs t-dist pvalue -----------------------------------------
ncell <- ncol(ROSMAP_oli_ct)

tdist_p <- function(est, ncell){
  tp <- est*sqrt((ncell-2)/(1-est^2))
  tp <- 2 * (1-pt(q = abs(tp), df = ncell - 2))
  return(tp)
}

# th <- qt(0.975, df=ncell-2)
# rho2 <- sqrt(th^2/(ncell-2+th^2))

upper2matrix_unadj <- function(est_mat, col_name){
  p_mat <- est_mat-est_mat
  p_mat[upper.tri(p_mat)] <- ROSMAP_p[,col_name]
  p_mat <- p_mat + t(p_mat)
  return(p_mat)
}

est_list <- list(ROSMAP_sct_est, ROSMAP_ana_prn_est, ROSMAP_noise_est, ROSMAP_prn_est, ROSMAP_spr_est)
names(est_list) <- c("sctransform", "Analytic PR", "Noise \nRegularization", "Pearson", "Spearman")
method <- c("sct", "ana_prn", "noise", "prn", "spr")
names(method) <- c("sctransform", "Analytic PR", "Noise \nRegularization", "Pearson", "Spearman")

tp <- tdist_p(est_list[["sctransform"]], ncell)
tp_adj <- tp[upper.tri(tp)]
tp_adj <- p.adjust(tp_adj,method = "BH")
tp_est <- ROSMAP_sct_est[upper.tri(ROSMAP_sct_est)]

sct_tp_emp <- data.frame(tp = tp[upper.tri(tp)],
                         tp_adj = tp_adj,
                         est = tp_est,
                         emp = ROSMAP_p$sct,
                         emp_adj = ROSMAP_p_adj$sct,
                         true = ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)],
                         est_abs = abs(tp_est))
sct_tp_emp$true_bin <- sct_tp_emp$true!=0
# library(PRROC)
# pr.curve(scores.class0 = -sct_tp_emp$emp, weights.class0=sct_tp_emp$true_bin,curve=TRUE)
# pr.curve(scores.class0 = -sct_tp_emp$tp, weights.class0=sct_tp_emp$true_bin,curve=TRUE)
# roc.curve(scores.class0 = -sct_tp_emp$emp, weights.class0=sct_tp_emp$true_bin,curve=TRUE)
# roc.curve(scores.class0 = -sct_tp_emp$tp, weights.class0=sct_tp_emp$true_bin, curve=TRUE)

idx <- sample(1:nrow(sct_tp_emp), size = 20000)
ggplot(sct_tp_emp[idx,], aes(x=emp, y=tp))+
  geom_point(alpha=0.1)+
  geom_smooth()+facet_wrap(~true_bin)

sct_tp_emp[c(17770,163976),]
sct_tp_emp[c(29468,312901),]
summary(abs(sct_tp_emp$est[sct_tp_emp$tp_adj<0.05 & sct_tp_emp$true!=0]))
summary(abs(sct_tp_emp$est[sct_tp_emp$emp_adj<0.05 & sct_tp_emp$true!=0]))
min_value <- min(abs(sct_tp_emp$est[sct_tp_emp$emp_adj<0.05 & sct_tp_emp$true!=0]))
min_value_tp <- min(abs(sct_tp_emp$est[sct_tp_emp$tp_adj<0.05 & sct_tp_emp$true!=0]))
which(abs(sct_tp_emp$est)==min_value)
which(abs(sct_tp_emp$est)<=min_value_tp)
sct_tp_emp[27563,] # significant in empirical p, insignificant in t-dist p
dat <- data.frame(est=abs(sct_tp_emp$est[sct_tp_emp$emp_adj<0.05 & sct_tp_emp$true!=0]))


set.seed(2232024)
idx <- sample(1:sum(ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)]==0), 10000)
qq_plot_t_ls <- list()
for (i in names(est_list)){
  tp <- tdist_p(est_list[[i]], ncell)

  plot_dat <- data.frame(t_p=tp[upper.tri(tp)],
                         true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
  # plot_dat$adj <- p.adjust(plot_dat$t_p, method = "BH")
  # plot_dat$est <- ROSMAP_sct_est[upper.tri(ROSMAP_sct_est)]
  # plot_dat <- plot_dat[plot_dat$adj<0.05,]
  # min(abs(plot_dat$est))
  plot_dat <- plot_dat[plot_dat$true==0, ][idx,]
  plot_dat$idx <- (1:length(idx))/(length(idx)+1)
  qq_plot_t_ls[[i]] <- ggplot(plot_dat, aes(x=idx, y=sort(t_p)))+
    geom_point()+
    geom_abline(intercept=0, slope=1, color="red")+
    theme_bw()+labs(x="Theoretical Quantiles", y="T-dist P-value", title=i)
}
ggarrange(plotlist = qq_plot_t_ls, ncol = 5, nrow=1)

ROSMAP_tp <- ROSMAP_p[,method[1:5]]
plot_ls <- list()
for (i in names(est_list)){
  tp <- tdist_p(est_list[[i]], ncell)
  ROSMAP_tp[,method[i]] <- tp[upper.tri(tp)]
  plot_dat <- data.frame(t_p=tp[upper.tri(tp)],
                         empirical_p=ROSMAP_p[,method[i]],
                         true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
  plot_dat$t_p_adj <- p.adjust(plot_dat$t_p, method="BH")
  plot_dat$empirical_p_adj <- p.adjust(plot_dat$empirical_p, method="BH")
  plot_dat$True_cor <- ifelse(plot_dat$true!=0, "Correlated", "Independent")
  table(plot_dat$t_p_adj<0.05, plot_dat$True_cor)
  table(plot_dat$empirical_p_adj<0.05, plot_dat$True_cor)

  plot_ls[[i]] <- ggplot(plot_dat, aes(x=empirical_p, y=t_p, color=True_cor))+
    geom_point(alpha=0.3)+
    geom_abline(intercept = 0, slope=1)+
    theme_bw()+labs(x="Empirical P-value", y="T-dist P-value", title=i)+
    facet_wrap(True_cor~.)+
    theme(plot.title = element_text(hjust=0.5),
          axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = "none",
          text = element_text(size = 14))
}

est_sub <- est_sub[est_sub$sct>-0.00025 & est_sub$sct< -0.00024 ,]
ROSMAP_tp_sub <- ROSMAP_tp[ROSMAP_p$sct<0.05 & ROSMAP_p$prn>0.05,]

est_sub <- data.frame(sct=ROSMAP_sct_est[upper.tri(ROSMAP_sct_est)],
                      noise=ROSMAP_noise_est[upper.tri(ROSMAP_noise_est)],
                      prn=ROSMAP_prn_est[upper.tri(ROSMAP_prn_est)],
                      spr=ROSMAP_spr_est[upper.tri(ROSMAP_spr_est)])
est_sub

idx <- sample(1:nrow(est_sub), 50000)
plot(abs(est_sub$sct), ROSMAP_tp$sct)

par(mfrow=c(1,1))
copt <- qt(1-ROSMAP_p$spr/2, ncell-2)
copr <- sqrt(copt^2/(ncell-2+copt^2))
summary(copr)
summary(ROSMAP_p$spr)
plot(abs(est_sub$spr)[idx], copr[idx])

copr_sub <- copr[which(abs(est_sub$spr)>0.000347 & abs(est_sub$spr)<0.000348)]
ROSMAP_p$spr[which(abs(est_sub$spr)>0.0157 & abs(est_sub$spr)<0.0158)]
ROSMAP_tp$spr[which(abs(est_sub$spr)>0.0157 & abs(est_sub$spr)<0.0158)]

png(filename="mean_cor/semi_PD_sparse/figures/t_p_vs_empirical_p.png", width = 800, height = 250)
ggarrange(plot_ls$sctransform, plot_ls$`Analytic PR`,
          ncol = 2, nrow=1, labels = c("A", "B"))
dev.off()

png(filename="mean_cor/semi_PD_sparse/figures/t_p_vs_empirical_p_all.png", width = 800, height = 750)
ggarrange(plot_ls$sctransform, plot_ls$`Analytic PR`, plot_ls$`Noise
Regularization`, plot_ls$Pearson, plot_ls$Spearman,
          ncol = 2, nrow=3, labels = c("A", "B"))
dev.off()

tp <- tdist_p(est_list[["Analytic PR"]], ncell)
plot_dat <- data.frame(t_p=tp[upper.tri(tp)],
                       empirical_p=ROSMAP_p$ana_prn,
                       true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
plot_dat$diff <- ifelse(plot_dat$t_p<0.05 & plot_dat$empirical_p>0.1, "Yes", "No")
plot_dat_ind <- plot_dat[plot_dat$true==0,]
ggplot(plot_dat_ind, aes(x=empirical_p, y=t_p, color=diff))+
  geom_point(alpha=0.3)+
  geom_abline(intercept = 0, slope=1)+
  theme_bw()+labs(x="Empirical P-value", y="T-dist P-value", title="Analytic Pearson")+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none",
        text = element_text(size = 14))
plot_dat$est <- est_list[["Analytic PR"]][upper.tri(est_list[["Analytic PR"]])]

marginal_fit_ROSMAP = readRDS('marginal_fit/ROSMAP_NC_Oli_marginal_fit.rds')
mu_ROSMAP <- marginal_fit_ROSMAP[gene_name,]$mu

ncor_gene <- length(gene_name)
mu_col_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene,byrow = T)
mu_row_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene)
plot_dat$mu_row <- mu_row_ROSMAP[upper.tri(mu_row_ROSMAP)]
plot_dat$mu_col <- mu_col_ROSMAP[upper.tri(mu_col_ROSMAP)]
plot_dat$log10mean_mu <- log10(sqrt(10^plot_dat$mu_col*10^plot_dat$mu_row))
plot_dat$group <- plot_dat$diff=="Yes" & plot_dat$true==0

ggplot(plot_dat, aes(x=log10mean_mu, color=group))+
  geom_density()+theme_bw()

nulll <- readRDS("mean_cor/simu/ROSMAP_simu_null.rds")

nulll_ana_prn <- nulll$ana_prn
idx <- which(plot_dat$diff=="Yes" & plot_dat$true==0)
nulll_ana_prn_sub <- nulll_ana_prn[idx,]
plot_dat_sub <- plot_dat[idx,]



idx_sub <- sample(length(idx), 10)
par(mfrow=c(2,5))
for (i in idx_sub){
  hist(nulll_ana_prn_sub[i,], main="")
  abline(v=plot_dat_sub$est[i], col="red")
}

ggplot(plot_dat, aes(x=log10mean_mu, color=group))+
  geom_density()+theme_bw()


# sctransform
tp <- tdist_p(est_list[["sctransform"]], ncell)
plot_dat <- data.frame(t_p=tp[upper.tri(tp)],
                       empirical_p=ROSMAP_p$sct,
                       true=ROSMAP_ori_ests[upper.tri(ROSMAP_ori_ests)])
plot_dat$diff <- ifelse(plot_dat$t_p<0.05 & plot_dat$empirical_p>0.1, "Yes", "No")
plot_dat_ind <- plot_dat[plot_dat$true==0,]
ggplot(plot_dat_ind, aes(x=empirical_p, y=t_p, color=diff))+
  geom_point(alpha=0.3)+
  geom_abline(intercept = 0, slope=1)+
  theme_bw()+labs(x="Empirical P-value", y="T-dist P-value", title="sctransform")+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none",
        text = element_text(size = 14))
plot_dat$est <- est_list[["sctransform"]][upper.tri(est_list[["sctransform"]])]
plot_dat$mu_row <- mu_row_ROSMAP[upper.tri(mu_row_ROSMAP)]
plot_dat$mu_col <- mu_col_ROSMAP[upper.tri(mu_col_ROSMAP)]
plot_dat$log10mean_mu <- log10(sqrt(10^plot_dat$mu_col*10^plot_dat$mu_row))
plot_dat$group <- plot_dat$diff=="Yes" & plot_dat$true==0

ggplot(plot_dat, aes(x=log10mean_mu, color=group))+
  geom_density()+theme_bw()

nulll_sct <- nulll$sct
idx <- which(plot_dat$diff=="Yes" & plot_dat$true==0)
nulll_sct_sub <- nulll_sct[idx,]
plot_dat_sub <- plot_dat[idx,]

idx_sub <- sample(length(idx), 10)
par(mfrow=c(2,5))
for (i in idx_sub){
  hist(nulll_sct_sub[i,], main="")
  abline(v=plot_dat_sub$est[i], col="red")
}

ggplot(plot_dat, aes(x=log10mean_mu, color=group))+
  geom_density()+theme_bw()

# the relationship between pvalue and correlation strength
tri = upper.tri(ROSMAP_filtered_ori_ests, diag = FALSE)
plot_dat <- data.frame(ana_prn=ROSMAP_ana_prn_est[tri],
                       true=ROSMAP_ori_ests[tri])
plot_dat$cscore_est <- ROSMAP_cscore_est[tri]
plot_dat$sct <- ROSMAP_sct_est[tri]
plot_dat$noise <- ROSMAP_noise_est[tri]
plot_dat$propr <- ROSMAP_propr_est[tri]
plot_dat$prn <- ROSMAP_prn_est[tri]
plot_dat$spr <- ROSMAP_spr_est[tri]
plot_dat$true_cor <- plot_dat$true!=0

seq_cor <- seq(0,1,by=0.05)
prop_mat <- matrix(NA, nrow = length(seq_cor)-1, ncol=9)
colnames(prop_mat) <- c("start", "end", "sct", "ana_prn", "noise", "prn", "spr", "propr","cscore_est")

for (i in 1:(length(seq_cor)-1)){
  prop_mat[i,c(1,2)] <- c(seq_cor[i], seq_cor[i+1])
  for (j in 1:(ncol(prop_mat)-2)){
    md <- colnames(prop_mat)[j+2]
    sub_data <- plot_dat[plot_dat[,md]>seq_cor[i] & plot_dat[,md]<=seq_cor[i+1], ]
    prop_mat[i,md] <- mean(sub_data$true_cor)
  }
}
prop_mat <- as.data.frame(prop_mat)
prop_mat <- reshape2::melt(prop_mat, id.vars = c("start", "end"))
prop_mat$value[is.nan(prop_mat$value)] <- 1
prop_mat$group <- paste0("(", prop_mat$start, ", ", prop_mat$end, "]")
prop_mat_ori <- prop_mat
prop_mat_ori$Group <- "Original"
prop_mat_ori$variable <- recode(prop_mat_ori$variable,
                               sct="sctransform", prn="Pearson", spr="Spearman",
                               propr="propr",ana_prn="Analytic PR",
                               noise="Noise \nRegularization", cscore_est="CS-CORE")
color_setting <- c("CS-CORE \n(Empirical)"="darkgreen", "Noise \nRegularization"="#FF1F5B",
                   "CS-CORE"="brown", "sctransform"="#AF58BA",
                   "Pearson"="#FFC61E", "Spearman"="#F28522","Analytic PR"="#a3d0d4",
                   "propr"="#2166AC")
p1 <- ggplot(prop_mat_ori, aes(x=start, y=value, color=variable))+
  geom_line()+geom_point()+theme_bw()+ylim(c(0,1))+
  scale_colour_manual(values = color_setting)+
  labs(x="Estimated correlation strength", y="% of true correlated pairs",
       color="Method", title="Original")+
  theme(plot.title = element_text(hjust=0.5))


plot_dat <- data.frame(ana_prn=ROSMAP_ana_prn_est_filter[tri],
                       true=ROSMAP_ori_ests[tri])
plot_dat$cscore_est <- ROSMAP_cscore_est_filter_simu[tri]
plot_dat$sct <- ROSMAP_sct_est_filter[tri]
plot_dat$noise <- ROSMAP_noise_est_filter[tri]
plot_dat$propr <- ROSMAP_propr_est_filter[tri]
plot_dat$prn <- ROSMAP_prn_est_filter[tri]
plot_dat$spr <- ROSMAP_spr_est_filter[tri]
plot_dat$true_cor <- plot_dat$true!=0
plot_dat$cscore_p <- ROSMAP_cscore_est_filter[tri]


seq_cor <- seq(0,1,by=0.05)
prop_mat <- matrix(NA, nrow = length(seq_cor)-1, ncol=10)
colnames(prop_mat) <- c("start", "end", "sct", "ana_prn", "noise", "prn", "spr", "propr","cscore_est", "cscore_p")

for (i in 1:(length(seq_cor)-1)){
  prop_mat[i,c(1,2)] <- c(seq_cor[i], seq_cor[i+1])
  for (j in 1:(ncol(prop_mat)-2)){
    md <- colnames(prop_mat)[j+2]
    sub_data <- plot_dat[plot_dat[,md]>seq_cor[i] & plot_dat[,md]<=seq_cor[i+1], ]
    prop_mat[i,md] <- mean(sub_data$true_cor)
  }
}
prop_mat <- as.data.frame(prop_mat)
prop_mat <- reshape2::melt(prop_mat, id.vars = c("start", "end"))
prop_mat$value[is.nan(prop_mat$value)] <- 1
prop_mat$group <- paste0("(", prop_mat$start, ", ", prop_mat$end, "]")
prop_mat$Group <- "Thresholding"
prop_mat$variable <- recode(prop_mat$variable,
                            sct="sctransform", prn="Pearson", spr="Spearman",
                            propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                            noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")
p2 <- ggplot(prop_mat, aes(x=start, y=value, color=variable))+
  geom_line()+geom_point()+theme_bw()+ylim(c(0,1))+
  scale_colour_manual(values = color_setting)+
  labs(x="Estimated correlation strength", y="% of true correlated pairs",
       color="Method", title="Adjusted p-value < 0.05")+
  theme(plot.title = element_text(hjust=0.5))
p2

pdf('figures/v2/prop_truth_vs_strength.pdf', width = 5.2, height = 3, onefile = T)
ggarrange(ggarrange(p1, p2, common.legend = T, ncol = 2, nrow=1, labels = c("A", "B"),
          legend = "none"), get_legend(p2+theme(legend.position = "bottom")), ncol=1, nrow=2, heights = c(5,1))
dev.off()

#-----------------------------------------------------------

marginal_fit_ROSMAP = readRDS('marginal_fit/ROSMAP_NC_Oli_marginal_fit.rds')
mu_ROSMAP <- marginal_fit_ROSMAP[gene_name,]$mu

ncor_gene <- length(gene_name)
mu_col_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene,byrow = T)
mu_row_ROSMAP <- matrix(mu_ROSMAP,ncor_gene,ncor_gene)

# filtered
tri = upper.tri(ROSMAP_ori_ests, diag = FALSE)
idxs = which(tri, arr.ind = T)
estimate_ROSMAP <- data.frame(id1=rownames(ROSMAP_ori_ests)[idxs[,1]],
                              id2=colnames(ROSMAP_ori_ests)[idxs[,2]],
                              ROSMAP_ori=ROSMAP_ori_ests[tri],
                              mu_col_ROSMAP=mu_col_ROSMAP[tri],
                              mu_row_ROSMAP=mu_row_ROSMAP[tri],
                              ROSMAP_ori_ests=ROSMAP_ori_ests[tri])
estimate_ROSMAP$log10mean_mu_ROSMAP <- log10(sqrt(10^estimate_ROSMAP$mu_col_ROSMAP*10^estimate_ROSMAP$mu_row_ROSMAP))
estimate_ROSMAP$true_cor <- ifelse(abs(estimate_ROSMAP$ROSMAP_ori_ests)!=0, 1, 0)


mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
G_list <- getBM(filters= "hgnc_symbol", attributes= c("ensembl_gene_id","hgnc_symbol"),values=rownames(ROSMAP_ori_ests),mart= mart)
G_list <- G_list %>% group_by(hgnc_symbol) %>%
  dplyr::slice(1) %>% ungroup()
unmapped <- rownames(ROSMAP_ori_ests)[!rownames(ROSMAP_ori_ests) %in% G_list$hgnc_symbol]
ensembl <- c(unmapped, G_list$ensembl_gene_id)
names(ensembl) <- c(unmapped, G_list$hgnc_symbol)
estimate_ROSMAP$id1 <- ensembl[estimate_ROSMAP$id1]
estimate_ROSMAP$id2 <- ensembl[estimate_ROSMAP$id2]
estimate_ROSMAP <- estimate_ROSMAP %>%
  mutate(grp = paste(pmax(id1, id2), pmin(id1, id2), sep = "_"))

estimate_ROSMAP_filter <- estimate_ROSMAP

estimate_ROSMAP$cscore_est <- ROSMAP_cscore_est[tri]
estimate_ROSMAP$sct <- ROSMAP_sct_est[tri]
estimate_ROSMAP$ana_prn <- ROSMAP_ana_prn_est[tri]
estimate_ROSMAP$noise <- ROSMAP_noise_est[tri]
estimate_ROSMAP$propr <- ROSMAP_propr_est[tri]
estimate_ROSMAP$prn <- ROSMAP_prn_est[tri]
estimate_ROSMAP$spr <- ROSMAP_spr_est[tri]
estimate_ROSMAP$cscore_p <- estimate_ROSMAP$cscore_est

estimate_ROSMAP_filter$cscore_p <- ROSMAP_cscore_est_filter[tri]
estimate_ROSMAP_filter$sct <- ROSMAP_sct_est_filter[tri]
estimate_ROSMAP_filter$ana_prn <- ROSMAP_ana_prn_est_filter[tri]
estimate_ROSMAP_filter$noise <- ROSMAP_noise_est_filter[tri]
estimate_ROSMAP_filter$propr <- ROSMAP_propr_est_filter[tri]
estimate_ROSMAP_filter$prn <- ROSMAP_prn_est_filter[tri]
estimate_ROSMAP_filter$spr <- ROSMAP_spr_est_filter[tri]
estimate_ROSMAP_filter$cscore_est <- ROSMAP_cscore_est_filter_simu[tri]

estimate_ROSMAP_p_adj <- estimate_ROSMAP_filter
estimate_ROSMAP_p_adj[,colnames(ROSMAP_p_adj)] <- ROSMAP_p_adj
estimate_ROSMAP_p_adj$cscore_p <- ROSMAP_cscore_p[tri]


# number of total overlap ------------------------------------------------------
# biological_net <- hs_filter
biological_net <- hs_filter[hs_filter$combined_score>500,]

bio_gene <- unique(c(biological_net$protein1, biological_net$protein2))
data_gene <- unique(c(estimate_ROSMAP$id1, estimate_ROSMAP$id2))
venn::venn(list("Exp"=data_gene, "Bio"=bio_gene))


exp_data <- marginal_fit_ROSMAP[gene_name,]
exp_data$biological <- ifelse(data_gene %in% bio_gene, "Bio", "Not Bio")
ggplot(exp_data, aes(x=mu, fill=biological))+
  geom_density(alpha=0.5)


estimate_ROSMAP_true_cor <- estimate_ROSMAP[estimate_ROSMAP$true_cor==1,]
estimate_ROSMAP_true_cor$biological <- as.factor(estimate_ROSMAP_true_cor$grp %in% biological_net$grp)
table(estimate_ROSMAP_true_cor$biological)

true_overlap <- sum(estimate_ROSMAP_true_cor$grp %in% biological_net$grp)
# estimate_ROSMAP_true_noncor <- estimate_ROSMAP[estimate_ROSMAP$true_cor==0,]
# sum(estimate_ROSMAP_true_noncor$grp %in% biological_net$grp)
#
# ggplot(estimate_ROSMAP_true_cor, aes(x=abs(ROSMAP_ori_ests), color=biological, fill=biological))+
#   geom_density(alpha=0.5)
# ggplot(estimate_ROSMAP_true_cor, aes(x=log10mean_mu_ROSMAP, color=biological, fill=biological))+
#   geom_density(alpha=0.5)


# rank of cor strength and rank of p -----------------------------------------
top_cutoff <- sort(c(seq(1000, 10000, by=1000), 20000,25000,30000,35000,40000,45000,50000))
p_cutoff <- c(0.001, 0.005, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4)

# p-value based approach
estimate_p <- estimate_ROSMAP[,1:9]
estimate_p <- cbind(estimate_p, ROSMAP_p_adj)
estimate_p$cscore_p <- ROSMAP_cscore_p[upper.tri(ROSMAP_cscore_p)]

# p_cutoff <- c(seq(0,0.01, by=0.0001), seq(0.011,0.05, by=0.001), seq(0.06,1,by=0.01))
p_mat <- matrix(NA, nrow = length(p_cutoff)*(ncol(ROSMAP_p)+1), ncol=4)
colnames(p_mat) <- c("method","prec", "cor", "cutoff")
p_mat[,1] <- rep(c(colnames(ROSMAP_p), "cscore_p"), each=length(p_cutoff))

for (i in 1:length(p_cutoff)){
  thresh <- p_cutoff[i]
  if(i%%10==0){print(i)}

  for (s in 1:(ncol(ROSMAP_p)+1)){
    j <- c(colnames(ROSMAP_p), "cscore_p")[s]
    ROSMAP_deci <- estimate_p[estimate_p[,j]<thresh,]
    p_mat[i+(s-1)*length(p_cutoff),"prec"] <- sum(ROSMAP_deci$true_cor==1)/nrow(ROSMAP_deci)
    p_mat[i+(s-1)*length(p_cutoff),"cor"] <- nrow(ROSMAP_deci)
    p_mat[i+(s-1)*length(p_cutoff),"cutoff"] <- thresh
  }
}

p_mat <- as.data.frame(p_mat)
p_mat$prec <- as.numeric(p_mat$prec)
p_mat$cor <- as.numeric(p_mat$cor)
p_mat$approach <- "p-value"


# correlation strength based approach
total_pair <- nrow(estimate_ROSMAP)
# top_cutoff <- c(seq(1000,50000,by=1000), seq(52000, 100000, by=2000), seq(105000, nrow(ROSMAP_p), by=2000))
top_mat <- matrix(NA, nrow = length(top_cutoff)*ncol(ROSMAP_p), ncol=4)
colnames(top_mat) <- c("method","prec", "cor", "cutoff")
top_mat[,1] <- rep(colnames(ROSMAP_p), each=length(top_cutoff))

for (i in 1:length(top_cutoff)){
  thresh <- top_cutoff[i]
  if(i%%10==0){print(i)}

  for (s in 1:ncol(ROSMAP_p)){
    j <- colnames(ROSMAP_p)[s]
    cor_ROSMAP <- abs(estimate_ROSMAP[,j])
    deci_ROSMAP <- estimate_ROSMAP[cor_ROSMAP>quantile(cor_ROSMAP, 1-thresh/total_pair),]

    top_mat[i+(s-1)*length(top_cutoff),"prec"] <- sum(deci_ROSMAP$true_cor==1)/nrow(deci_ROSMAP)
    top_mat[i+(s-1)*length(top_cutoff),"cor"] <- nrow(deci_ROSMAP)
    top_mat[i+(s-1)*length(top_cutoff),"cutoff"] <- thresh
  }
}

top_mat <- as.data.frame(top_mat)
top_mat$prec <- as.numeric(top_mat$prec)
top_mat$cor <- as.numeric(top_mat$cor)
top_mat$approach <- "cor-strength"
ggplot(top_mat, aes(x=cor, y=prec, color=method))+
  geom_point()+labs(x="# of identified correlated pairs", y="precision")+
  geom_line()+theme_bw()

ggplot(p_mat, aes(x=cor, y=prec, color=method))+
  geom_point()+labs(x="# of identified correlated pairs", y="precision")+
  geom_line()+theme_bw()

#
# # correlation strength based approach with a p-value threshold
# k <- 0.05
# top_fil_mat <- matrix(NA, nrow = length(top_cutoff)*(ncol(ROSMAP_p)+1), ncol=4)
# colnames(top_fil_mat) <- c("method","prec", "cor", "cutoff")
# top_fil_mat[,1] <- rep(c(colnames(ROSMAP_p), "cscore_p"), each=length(top_cutoff))
#
#
# for (i in 1:length(top_cutoff)){
#   thresh <- top_cutoff[i]
#   if(i%%10==0){print(i)}
#
#   for (s in 1:(ncol(ROSMAP_p)+1)){
#     j <- c(colnames(ROSMAP_p), "cscore_p")[s]
#     cor_ROSMAP <- estimate_ROSMAP[,j]
#     cor_ROSMAP[estimate_ROSMAP_p_adj[,j]>=k] <- 0
#     cor_ROSMAP <- abs(cor_ROSMAP)
#     deci_ROSMAP <- estimate_ROSMAP_filter[cor_ROSMAP>quantile(cor_ROSMAP, 1-thresh/total_pair),]
#
#     top_fil_mat[i+(s-1)*length(top_cutoff),"prec"] <- sum(deci_ROSMAP$true_cor==1)/nrow(deci_ROSMAP)
#     top_fil_mat[i+(s-1)*length(top_cutoff),"cor"] <- nrow(deci_ROSMAP)
#     top_fil_mat[i+(s-1)*length(top_cutoff),"cutoff"] <- thresh
#   }
# }
#
# top_fil_mat <- as.data.frame(top_fil_mat)
# top_fil_mat$prec <- as.numeric(top_fil_mat$prec)
# top_fil_mat$cor <- as.numeric(top_fil_mat$cor)
# top_fil_mat$approach <- "cor-strength with p cutoff"
#
#
# # p-value based method with correlation strength cutoff
# estimate_ROSMAP_new <- estimate_ROSMAP
# estimate_ROSMAP_new$cscore_p <- estimate_ROSMAP_new$cscore_est
#
# p_fil_mat <- matrix(NA, nrow = length(p_cutoff)*(ncol(ROSMAP_p)+1), ncol=4)
# colnames(p_fil_mat) <- c("method","prec", "cor", "cutoff")
# p_fil_mat[,1] <- rep(c(colnames(ROSMAP_p), "cscore_p"), each=length(p_cutoff))
#
# k <- 0.05
# for (i in 1:length(p_cutoff)){
#   thresh <- p_cutoff[i]
#   if(i%%10==0){print(i)}
#
#   for (s in 1:(ncol(ROSMAP_p)+1)){
#     j <- c(colnames(ROSMAP_p), "cscore_p")[s]
#     ROSMAP_deci <- estimate_p[estimate_p[,j]<thresh & abs(estimate_ROSMAP_new[,j])>k,]
#
#     p_fil_mat[i+(s-1)*length(p_cutoff),"prec"] <- sum(ROSMAP_deci$true_cor==1)/nrow(ROSMAP_deci)
#     p_fil_mat[i+(s-1)*length(p_cutoff),"cor"] <- nrow(ROSMAP_deci)
#     p_fil_mat[i+(s-1)*length(p_cutoff),"cutoff"] <- thresh
#   }
# }
# p_fil_mat <- as.data.frame(p_fil_mat)
# p_fil_mat$prec <- as.numeric(p_fil_mat$prec)
# p_fil_mat$cor <- as.numeric(p_fil_mat$cor)
# p_fil_mat$approach <- "p-value with cor-strength cutoff"
#
#
# comb_dt <- rbind(p_mat,top_mat, top_fil_mat, p_fil_mat)
# ggplot(comb_dt, aes(x=cor, y=prec, color=approach))+
#   geom_point(alpha=1)+facet_wrap(.~method)+
#   labs(x="# of identified correlated pairs", y="precision")+
#   geom_line()+theme_bw()+theme(legend.position = "bottom")+xlim(0,50000)
# ggplot(comb_dt, aes(x=cor, y=prec, color=approach))+
#   geom_point(alpha=1)+facet_grid(approach~method)+
#   labs(x="# of identified correlated pairs", y="precision")+
#   geom_line()+theme_bw()+theme(legend.position = "bottom",
#                                axis.text.x = element_text(angle = 45, hjust = 1))




## overlap with biological network with different top threshold -----------------
top_cutoff <- c(1000,5000, 10000, 50000,100000, sum(estimate_ROSMAP$true_cor))
overlap_string <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_string) <- top_cutoff
rownames(overlap_string) <- colnames(ROSMAP_p)

overlap_true <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_true) <- top_cutoff
rownames(overlap_true) <- colnames(ROSMAP_p)

overlap_prec <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_prec) <- top_cutoff
rownames(overlap_prec) <- colnames(ROSMAP_p)


total_pair <- nrow(estimate_ROSMAP)
for (i in 1:length(top_cutoff)){
  thresh <- top_cutoff[i]
  print(thresh)

  selected_genes_thresh <- list()
  for (j in rownames(overlap_string)){
    cor_ROSMAP <- abs(estimate_ROSMAP[,j])
    deci_ROSMAP <- estimate_ROSMAP[cor_ROSMAP>quantile(cor_ROSMAP, 1-thresh/total_pair),]
    overlap_string[j,i] <- sum(deci_ROSMAP$grp %in% biological_net$grp)
    overlap_true[j,i] <- sum((deci_ROSMAP$grp %in% biological_net$grp)&deci_ROSMAP$true_cor==1)
    overlap_prec[j,i] <- sum(deci_ROSMAP$true_cor==1)/nrow(deci_ROSMAP)
  }
}

overlap_string
overlap_true
(overlap_string-overlap_true)/overlap_true

# color_setting <- c("CS-CORE \n(Empirical)"="darkgreen", "Noise \nRegularization"="#FF1F5B",
#                    "CS-CORE"="brown", "sctransform"="#AF58BA",
#                    "Pearson"="#FFC61E", "Spearman"="#F28522","Analytic PR"="#a3d0d4",
#                    "propr"="#2166AC")
color_setting <- c("CS-CORE \n(Empirical)"="brown", "Noise \nRegularization"="#AF58BA",
                   "CS-CORE"="#339933", "sctransform"="#ff6699",
                   "Pearson"="#F28522", "Spearman"="#ffff66","Analytic PR"="#99ccff",
                   "propr"="#3366cc")


overlap_prec_long <- reshape2::melt(overlap_prec)
colnames(overlap_prec_long) <- c("Method", "Top", "Precision")
overlap_string_long <- reshape2::melt(overlap_string)
colnames(overlap_string_long) <- c("Method", "Top", "Overlap")


# shape_setting <- 1:length(top_cutoff)
# names(shape_setting) <- top_cutoff
overlap_prec_overlap <- left_join(overlap_prec_long, overlap_string_long, by=c("Method", "Top"))
overlap_prec_overlap$Top <- as.factor(overlap_prec_overlap$Top)
overlap_prec_overlap$Group <- "Original"
overlap_prec_overlap$Method <- recode(overlap_prec_overlap$Method,
                                           sct="sctransform", prn="Pearson", spr="Spearman",
                                           propr="propr",ana_prn="Analytic PR",
                                           noise="Noise \nRegularization", cscore_est="CS-CORE")

p_prec_string_unfil <- ggplot(overlap_prec_overlap, aes(x=Overlap, y=Precision, color=Method))+
  geom_point()+ geom_line(size=1)+ylim(c(0.2,1))+theme_bw()+
  # scale_shape_manual(values=shape_setting)+
  scale_colour_manual(values = color_setting)+
  labs(title="Correlation strength", x="Overlaps with STRING", y="Precision", shape="Top")+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
p_prec_string_unfil


inflation_unfil_top <- as.data.frame(as.table((overlap_string-overlap_true)/overlap_string))
inflation_unfil_top$Var1 <- recode(inflation_unfil_top$Var1,
                                      sct="sctransform", prn="Pearson", spr="Spearman",
                                      propr="propr",ana_prn="Analytic PR",
                                      noise="Noise \nRegularization", cscore_est="CS-CORE")
string_infla_unfil <- ggplot(inflation_unfil_top, aes(x=Var2, y=Freq, color=Var1, group=Var1))+
  geom_point()+geom_line(size=1)+
  labs(y="Prop of misidentified overlaps", x="Top", color="Method",
       title="Correlation strength")+
  theme_bw()+scale_color_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),plot.subtitle = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_infla_unfil

inflation_unfil_top1 <- as.data.frame(as.table(overlap_string))
inflation_unfil_top2 <- as.data.frame(as.table(overlap_true))
inflation_unfil_top1$group <- "Identified overlaps"
inflation_unfil_top2$group <- "True overlaps"
inflation_unfil_top1$Var1 <- recode(inflation_unfil_top1$Var1,
                                    sct="sctransform", prn="Pearson", spr="Spearman",
                                    propr="propr",ana_prn="Analytic PR",
                                    noise="Noise \nRegularization", cscore_est="CS-CORE")
inflation_unfil_top2$Var1 <- recode(inflation_unfil_top2$Var1,
                                    sct="sctransform", prn="Pearson", spr="Spearman",
                                    propr="propr",ana_prn="Analytic PR",
                                    noise="Noise \nRegularization", cscore_est="CS-CORE")
inflation_unfil_top1_sub <- inflation_unfil_top1[inflation_unfil_top1$Var2==max(top_cutoff),] %>% arrange(desc(Freq))
inflation_unfil_top1$Var1 <- factor(inflation_unfil_top1$Var1, levels = unique(inflation_unfil_top1_sub$Var1))
inflation_unfil_top2$Var1 <- factor(inflation_unfil_top2$Var1, levels = unique(inflation_unfil_top1_sub$Var1))

string_count_unfil <- ggplot()+
  geom_bar(data=inflation_unfil_top1, mapping=aes(x=Var2, y=Freq, fill=Var1),
           stat = "identity",position=position_dodge())+
  labs(y="# of overlaps with STRING", x="Top", fill="Method", title="Correlation strength")+
  theme_bw()+
  scale_fill_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_count_unfil

string_count_true_unfil <- ggplot()+
  geom_bar(data=inflation_unfil_top2, mapping=aes(x=Var2, y=Freq, fill=Var1),
           stat = "identity",position=position_dodge())+
  labs(y="# of true overlaps with STRING", x="Top", fill="Method", title="Correlation strength")+
  theme_bw()+
  scale_fill_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_count_true_unfil


## overlap with biological network with different p-value threshold --------------------
p_cutoff <- c(0.001, 0.005, 0.01, 0.05, 0.1)
overlap_string_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_string_p) <- p_cutoff
rownames(overlap_string_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_true_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_true_p) <- p_cutoff
rownames(overlap_true_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_prec_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_prec_p) <- p_cutoff
rownames(overlap_prec_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_cor_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_cor_p) <- p_cutoff
rownames(overlap_cor_p) <- c(colnames(ROSMAP_p), "cscore_p")


estimate_p <- estimate_ROSMAP[,1:9]
estimate_p <- cbind(estimate_p, ROSMAP_p_adj)
estimate_p$cscore_p <- ROSMAP_cscore_p[upper.tri(ROSMAP_cscore_p)]
total_pair <- nrow(estimate_p)

for (i in 1:length(p_cutoff)){
  thresh <- p_cutoff[i]
  print(thresh)

  for (j in rownames(overlap_true_p)){
    ROSMAP_deci <- estimate_p[estimate_p[,j]<thresh,]
    overlap_string_p[j,i] <- sum(ROSMAP_deci$grp %in% biological_net$grp)
    overlap_true_p[j,i] <- sum((ROSMAP_deci$grp %in% biological_net$grp)&ROSMAP_deci$true_cor==1)
    overlap_prec_p[j,i] <- sum(ROSMAP_deci$true_cor==1)/nrow(ROSMAP_deci)
    overlap_cor_p[j,i] <- nrow(ROSMAP_deci)
  }
}


overlap_prec_p_long <- melt(overlap_prec_p)
colnames(overlap_prec_p_long) <- c("Method", "Top", "Precision")
overlap_string_p_long <- melt(overlap_string_p)
colnames(overlap_string_p_long) <- c("Method", "Top", "Overlap")

overlap_prec_overlap_p <- left_join(overlap_prec_p_long, overlap_string_p_long, by=c("Method", "Top"))
overlap_prec_overlap_p$Top <- as.factor(overlap_prec_overlap_p$Top)
overlap_prec_overlap_p$Method <- recode(overlap_prec_overlap_p$Method,
                                       sct="sctransform", prn="Pearson", spr="Spearman",
                                       propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                                       noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")
p_prec_string_p <- ggplot(overlap_prec_overlap_p, aes(x=Overlap, y=Precision, color=Method))+
  geom_point()+ geom_line(size=1)+ylim(c(0.2,1))+theme_bw()+
  # geom_errorbar(aes(ymin = min, ymax = max),width=500)+
  scale_colour_manual(values = color_setting)+
  labs(title="P-value", x="Overlaps with STRING", y="Precision", shape="P-value cutoff")+
  theme(plot.title = element_text(hjust=0.5),plot.subtitle = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
p_prec_string_p


inflation_p <- as.data.frame(as.table((overlap_string_p-overlap_true_p)/overlap_string_p))
inflation_p$Var1 <- recode(inflation_p$Var1,
                                 sct="sctransform", prn="Pearson", spr="Spearman",
                                 propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                                 noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")
string_infla_p <- ggplot(inflation_p, aes(x=Var2, y=Freq, color=Var1, group=Var1))+
  geom_point()+geom_line(size=1)+
  labs(y="Prop of misidentified overlaps", x="P-value cutoffs", color="Method",  title="P-value")+
  theme_bw()+scale_color_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),plot.subtitle = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_infla_p


inflation_p1 <- as.data.frame(as.table(overlap_string_p))
inflation_p2 <- as.data.frame(as.table(overlap_true_p))
inflation_p1$group <- "Identified overlaps"
inflation_p2$group <- "True overlaps"
inflation_p1$Var1 <- recode(inflation_p1$Var1,
                                  sct="sctransform", prn="Pearson", spr="Spearman",
                                  propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                                  noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")
inflation_p2$Var1 <- recode(inflation_p2$Var1,
                                  sct="sctransform", prn="Pearson", spr="Spearman",
                                  propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                                  noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")
inflation_p1_sub <- inflation_p1[inflation_p1$Var2==max(p_cutoff),] %>% arrange(Var2, desc(Freq))
inflation_p1$Var1 <- factor(inflation_p1$Var1, levels = unique(inflation_p1_sub$Var1))
inflation_p2$Var1 <- factor(inflation_p2$Var1, levels = unique(inflation_p1_sub$Var1))


string_count_p <- ggplot()+
  geom_bar(data=inflation_p1, mapping=aes(x=Var2, y=Freq, fill=Var1),
           stat = "identity",position=position_dodge())+
  labs(y="# of overlaps with STRING", x="P-value cutoffs", fill="Method", title="P-value")+
  theme_bw()+
  scale_fill_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),plot.subtitle = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_count_p

string_count_true_p <- ggplot()+
  geom_bar(data=inflation_p2, mapping=aes(x=Var2, y=Freq, fill=Var1),
           stat = "identity",position=position_dodge())+
  labs(y="# of true overlaps with STRING", x="P-value cutoffs", fill="Method", title="P-value")+
  theme_bw()+
  scale_fill_manual(values = color_setting)+
  theme(plot.title = element_text(hjust=0.5),plot.subtitle = element_text(hjust=0.5),
        axis.text.x = element_text(angle = 45, hjust = 1))
string_count_true_p


# fixed mis prop

## overlap with biological network with different top threshold -----------------
top_cutoff <- sort(c(seq(1000, 10000, by=1000), 20000,25000,30000,35000,40000,45000,50000))
overlap_string <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_string) <- top_cutoff
rownames(overlap_string) <- colnames(ROSMAP_p)

overlap_true <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_true) <- top_cutoff
rownames(overlap_true) <- colnames(ROSMAP_p)

overlap_prec <- matrix(NA, ncol = length(top_cutoff), nrow=7)
colnames(overlap_prec) <- top_cutoff
rownames(overlap_prec) <- colnames(ROSMAP_p)


total_pair <- nrow(estimate_ROSMAP)
for (i in 1:length(top_cutoff)){
  thresh <- top_cutoff[i]
  print(thresh)

  selected_genes_thresh <- list()
  for (j in rownames(overlap_string)){
    cor_ROSMAP <- abs(estimate_ROSMAP[,j])
    deci_ROSMAP <- estimate_ROSMAP[cor_ROSMAP>quantile(cor_ROSMAP, 1-thresh/total_pair),]
    overlap_string[j,i] <- sum(deci_ROSMAP$grp %in% biological_net$grp)
    overlap_true[j,i] <- sum((deci_ROSMAP$grp %in% biological_net$grp)&deci_ROSMAP$true_cor==1)
    overlap_prec[j,i] <- sum(deci_ROSMAP$true_cor==1)/nrow(deci_ROSMAP)
  }
}

overlap_string_long <- reshape2::melt(overlap_true)
colnames(overlap_string_long) <- c("Method", "Top", "Overlap")

inflation_unfil_top <- as.data.frame(as.table((overlap_string-overlap_true)/overlap_string))
colnames(inflation_unfil_top) <- c("Method", "cutoff", "Mis")
inflation_unfil_top$true <- overlap_string_long$Overlap
inflation_unfil_top_sub <- inflation_unfil_top[inflation_unfil_top$Method=="cscore_est",]
inflation_unfil_top_sub$Method <- "cscore_p"
inflation_unfil_top <- rbind(inflation_unfil_top_sub, inflation_unfil_top)

inflation_unfil_top$Method <- recode(inflation_unfil_top$Method,
                                     sct="sctransform", prn="Pearson", spr="Spearman",
                                     propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                                     noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")




## overlap with biological network with different p-value threshold --------------------
p_cutoff <- c(0.001, 0.005, 0.01, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4)
overlap_string_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_string_p) <- p_cutoff
rownames(overlap_string_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_true_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_true_p) <- p_cutoff
rownames(overlap_true_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_prec_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_prec_p) <- p_cutoff
rownames(overlap_prec_p) <- c(colnames(ROSMAP_p), "cscore_p")

overlap_cor_p <- matrix(NA, ncol = length(p_cutoff), nrow=8)
colnames(overlap_cor_p) <- p_cutoff
rownames(overlap_cor_p) <- c(colnames(ROSMAP_p), "cscore_p")


estimate_p <- estimate_ROSMAP[,1:9]
estimate_p <- cbind(estimate_p, ROSMAP_p_adj)
estimate_p$cscore_p <- ROSMAP_cscore_p[upper.tri(ROSMAP_cscore_p)]
total_pair <- nrow(estimate_p)

for (i in 1:length(p_cutoff)){
  thresh <- p_cutoff[i]
  print(thresh)

  for (j in rownames(overlap_true_p)){
    ROSMAP_deci <- estimate_p[estimate_p[,j]<thresh,]
    overlap_string_p[j,i] <- sum(ROSMAP_deci$grp %in% biological_net$grp)
    overlap_true_p[j,i] <- sum((ROSMAP_deci$grp %in% biological_net$grp)&ROSMAP_deci$true_cor==1)
    overlap_prec_p[j,i] <- sum(ROSMAP_deci$true_cor==1)/nrow(ROSMAP_deci)
    overlap_cor_p[j,i] <- nrow(ROSMAP_deci)
  }
}


overlap_string_p_long <- melt(overlap_true_p)
colnames(overlap_string_p_long) <- c("Method", "Top", "Overlap")

inflation_p <- as.data.frame(as.table((overlap_string_p-overlap_true_p)/overlap_string_p))
colnames(inflation_p) <- c("Method", "cutoff", "Mis")
inflation_p$true <- overlap_string_p_long$Overlap
inflation_p$Method <- recode(inflation_p$Method,
                             sct="sctransform", prn="Pearson", spr="Spearman",
                             propr="propr",ana_prn="Analytic PR",cscore_p="CS-CORE",
                             noise="Noise \nRegularization", cscore_est="CS-CORE \n(Empirical)")


string_p_ls <- list()
for (i in unique(inflation_p$Method)){
  plot_dat1 <- inflation_p[inflation_p$Method==i,]
  plot_dat1$group <- "P-value"
  plot_dat2 <- inflation_unfil_top[inflation_unfil_top$Method==i,]
  plot_dat2$group <- "Cor-strength"
  plot_dat <- rbind(plot_dat1, plot_dat2)
  string_p_ls[[i]] <- ggplot(plot_dat, aes(x=Mis, y=true, color=group))+
    geom_point(size=2)+geom_line(size=1)+labs(title=i, x="",
                                  y="", color="")+
    theme_bw()+
    scale_colour_manual(values = c("P-value"="darkblue", "Cor-strength"="darkred"))+
    theme(legend.position = "bottom")

}

string_p_ls[["sctransform"]] <- string_p_ls[["sctransform"]]+xlim(0,0.1)
string_p_ls[["Analytic PR"]] <- string_p_ls[["Analytic PR"]]+xlim(0,0.09)
string_p_ls[["CS-CORE"]] <- string_p_ls[["CS-CORE"]]+xlim(0,0.17)
string_p_ls[["CS-CORE \n(Empirical)"]] <- string_p_ls[["CS-CORE \n(Empirical)"]]+xlim(0,0.17)


ggarrange(plotlist = string_p_ls, nrow=2, ncol=4, common.legend = T, legend = "bottom")

plots <- string_p_ls
legend <- get_legend(plots[[1]]+theme(text = element_text(size = 17)))
adjusted_theme <- theme(legend.position = "none",text = element_text(size = 15),
                        plot.title = element_text(hjust=0.5),
                        axis.text.x = element_text(angle = 45, hjust = 1),
                        plot.tag = element_text(size = 14, face = "bold", vjust = 1.3, hjust = -1.5),
                        plot.tag.position = c(0,1),
                        plot.margin = unit(c(0, 0.15, 0, 0), "cm"))
plot_grid <- plot_grid(
  plots[[6]] + adjusted_theme +labs(tag="A"),
  plots[[8]] +adjusted_theme+labs(tag="B"),
  plots[[5]] + adjusted_theme+labs(tag="C"),
  plots[[7]] + adjusted_theme+labs(tag="D"),
  plots[[2]] + adjusted_theme+labs(tag="E"),
  plots[[4]] + adjusted_theme+labs(tag="F"),
  plots[[1]] + adjusted_theme+labs(tag="G"),
  plots[[3]] + adjusted_theme+labs(tag="H"),
  ncol = 4, nrow = 2, align = "hv"
)

final_plot_with_labels <- ggdraw() +
  draw_plot(plot_grid, 0.02, 0.09, 0.98, 0.9, hjust = 0) +
  draw_label("Prop of misidentified overlaps", x = 0.51, y = 0.08, vjust = -0.5, angle = 0, size = 15) +
  draw_label("# of true overlaps with STRING", x = 0, y = 0.55, vjust = 1.5, angle = 90, size = 15) +
  draw_plot(legend, 0, 0, 1, 0.1)

# Print the final plot
print(final_plot_with_labels)

pdf('mean_cor/semi_PD_sparse/figures/compare_string_v2.pdf', width = 11, height = 7, onefile = T)
print(final_plot_with_labels)
dev.off()
